<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"  creationComplete="{init()}"
		 xmlns:view="org.robotlegs.demos.helloflex.view.*"    xmlns:ui="sss.Shelpers.Shelpers.ui.*"
	 >

	
	<mx:Metadata>
		[Event(name="DataLoaded", type="org.robotlegs.stockchart.view.CustomEvent2")]
	</mx:Metadata>		
	<mx:Script>
		<![CDATA[
			import mx.controls.DateField;
			import mx.core.UITextField;
			import mx.events.FlexEvent;
			
			import org.robotlegs.stockchart.model.vo.StockPriceVO;
			import org.robotlegs.stockchart.view.CustomEvent2;
			
			import sss.Shelpers.Shelpers.ListHelpers;
			import sss.Shelpers.Shelpers.ShelpersUI;
			import sss.Shelpers.Shelpers.other.TweenerHelpers;
			import sss.Shelpers.vos.Indexxer;
			
			static public var 		FilterDatesChanged : String = 'FilterDatesChanged'	
			public function init()  : void
			{
				ShelpersUI.removeScrollbars( this )
					this.parentApplication.addEventListener( MouseEvent.CLICK, this.onClickOutside , false, 0, true)
					for each ( var txt : TextInput in [this.txtDateStart, this.txtDateEnd ] )
					{
						txt.styleName = 'defaultFilterBoxStyle'
						txt.addEventListener(FocusEvent.FOCUS_IN, this.onFocusIn, false, 0, true ) 
						txt.addEventListener(FocusEvent.FOCUS_OUT, this.onFocusOut, false, 0, true ) 
						txt.addEventListener(FlexEvent.VALUE_COMMIT, this.onCommitValue, false, 0, true ) ;
					}
			}			
					
			private var oldStartTime : String = ''; 
			private var oldEndTime : String = ''; 
			private var focus : Boolean = false; 
			protected function onFocusIn(event:FocusEvent):void
			{
				this.oldStartTime = this.txtDateStart.text ;
				this.oldEndTime = this.txtDateEnd.text
				this.focus = true; 
				for each ( var txt : TextInput in [this.txtDateStart, this.txtDateEnd ] )
				{
					txt.styleName = 'defaultFilterBoxStyle2'
				}
			}
			protected function onFocusOut(event:FocusEvent,alreadyChanged:Boolean=false):void
			{
				for each ( var txt : TextInput in [this.txtDateStart, this.txtDateEnd ] )
				{
					txt.styleName = 'defaultFilterBoxStyle'
				}
				if ( alreadyChanged ) 
						return ; 
				this.focus = false; 
				if (  this.oldStartTime != this.txtDateStart.text || this.oldEndTime != this.txtDateEnd.text ) 
				{
					this.onCommitValue( null ) 
				}
			}			
			protected function onCommitValue(event:FlexEvent):void
			{
				if ( this._commiting )
				{
					return;
				}
				if (  this.oldStartTime != this.txtDateStart.text || this.oldEndTime != this.txtDateEnd.text ) 
				{
					var startDate : Date = DateField.stringToDate( this.txtDateStart.text, 'YYYY-MM-DD' )
					var endDate : Date = DateField.stringToDate( this.txtDateEnd.text, 'YYYY-MM-DD' )
					//this.onCommitValue( null ) 
					this.dispatchEvent( new  CustomEvent2( FilterDatesChanged, [startDate, endDate] )  )
				}				
				
				
				this.onFocusOut(null, true ) 
			}
			public function onClickOutside(e:Event):void{
				if ( [this.txtDateStart, this.txtDateEnd].indexOf(e.currentTarget) != -1  )
					return
				if (  e.target is UITextField && e.target.document == this    )
					return; 
				if ( this.focus == false ) 
						return; 
				this.onCommitValue( null )
				
			}
			private var _commiting : Boolean = false; 
			public function setDates( start : Date, end : Date )  : void
			{
				_commiting = true; 
				this.txtDateStart.text =  DateField.dateToString( start,  'YYYY-MM-DD' )
				this.txtDateEnd.text = DateField.dateToString(end, 'YYYY-MM-DD' )
				this.oldStartTime = this.txtDateStart.text ;
				this.oldEndTime = this.txtDateEnd.text;		
				_commiting = false; 
			}

			public function setPrice(  a :  Number, b :  Number )  : void
			{
				var diff : Number = b-a
				var per : Number = diff/a
				this.txtPrice.text = diff.toFixed(2) + ' ' +  '('+Math.abs(per).toFixed(2)+'%)' 
				this.txtPrice.setStyle( 'color',  ( diff < 0  )  ? 0xC80033 : 0x008000   )
			}			
			
			
			public function onRolloverChartItem( price  : StockPriceVO )  : void
			{
				TweenerHelpers.FadeOut_Safe( this.holderDate ) 
				TweenerHelpers.FadeIn_Safe( this.holderPrice ) 
				this.txtPriceOnDate.text =  this.dateFormatter.format( price.date ) + ' ' + 'Price:  ' + price.price.toFixed(3) //+ ' ' + 'Vol:' + price.volume
				if ( this.txtPriceOnDate.text.length == 0 ) 
					onRolloutChartItem()
			}
			public function onRolloutChartItem(  )  : void
			{
				TweenerHelpers.FadeOut_Safe( this.holderPrice ) 
				TweenerHelpers.FadeIn_Safe( this.holderDate ) 
			}			
			
		]]>
	</mx:Script>
	<mx:DateFormatter id="dateFormatter"  formatString="MMM DD, YYYY"/>
	<mx:Style>
		.defaultFilterBoxStyle
		{
			borderColor: #CCCCCC;
			font-size: 10px; 
			borderStyle: solid;
			backgroundColor: #FFFFFF;		
			textAlign: center;			
		}
		.defaultFilterBoxStyle2
		{
			borderColor: #000000;
			font-size: 10px; 
			borderStyle: solid;
			backgroundColor: #FFFFA0;
			textAlign: center;
		}		
	</mx:Style>
	
	
	<mx:HBox horizontalGap="0" id="holderDate" verticalAlign="middle">
		<mx:TextInput id="txtDateStart"  styleName="defaultFilterBoxStyle" width="70" height="18"
				 />
		<mx:Text text="-" minWidth="0"  />
		<mx:TextInput id="txtDateEnd"  styleName="defaultFilterBoxStyle" width="70" height="18" />		
		<mx:Label  id="txtPrice"  width="80" text="-0.57 (-1.73%)" fontSize="10" color="0xC80033"  textAlign="right"/>
	</mx:HBox>
	
	
	<mx:HBox horizontalGap="0" id="holderPrice" alpha="0.0" right="0">
		<mx:Label id="txtPriceOnDate"  fontSize="10"  height="18"   textAlign="right"/>
	</mx:HBox>
	
</mx:Canvas>
